define(
		"pjax",
		[ "$" ],
		function(b, a, c) {
			var d = b("$");
			(function(k) {
				function o(H, I, J) {
					var K = this;
					return this.on("click.pjax", H, function(M) {
						var L = k.extend({}, w(I, J));
						if (!L.container) {
							L.container = k(this).attr("data-pjax") || K
						}
						p(M, L)
					})
				}
				function p(M, I, J) {
					J = w(I, J);
					var L = M.currentTarget;
					if (L.tagName.toUpperCase() !== "A") {
						throw "$.fn.pjax or $.pjax.click requires an anchor element"
					}
					if (M.which > 1 || M.metaKey || M.ctrlKey || M.shiftKey
							|| M.altKey) {
						return
					}
					if (location.protocol !== L.protocol
							|| location.hostname !== L.hostname) {
						return
					}
					if (L.hash
							&& L.href.replace(L.hash, "") === location.href
									.replace(location.hash, "")) {
						return
					}
					if (L.href === location.href + "#") {
						return
					}
					if (M.isDefaultPrevented()) {
						return
					}
					var N = {
						url : L.href,
						container : k(L).attr("data-pjax"),
						target : L
					};
					var K = k.extend({}, N, J);
					var H = k.Event("pjax:click");
					k(L).trigger(H, [ K ]);
					if (!H.isDefaultPrevented()) {
						D(K);
						M.preventDefault();
						k(L).trigger("pjax:clicked", [ K ])
					}
				}
				function u(K, H, I) {
					I = w(H, I);
					var J = K.currentTarget;
					if (J.tagName.toUpperCase() !== "FORM") {
						throw "$.pjax.submit requires a form element"
					}
					var L = {
						type : J.method.toUpperCase(),
						url : J.action,
						data : k(J).serializeArray(),
						container : k(J).attr("data-pjax"),
						target : J
					};
					D(k.extend({}, L, I));
					K.preventDefault()
				}
				function D(H) {
					H = k.extend(true, {}, k.ajaxSettings, D.defaults, H);
					if (k.isFunction(H.url)) {
						H.url = H.url()
					}
					var M = H.target;
					var L = t(H.url).hash;
					var I = H.context = v(H.container);
					if (!H.data) {
						H.data = {}
					}
					H.data._pjax = I.selector;
					function K(P, O) {
						var Q = k.Event(P, {
							relatedTarget : M
						});
						I.trigger(Q, O);
						return !Q.isDefaultPrevented()
					}
					var J;
					H.beforeSend = function(P, O) {
						if (O.type !== "GET") {
							O.timeout = 0
						}
						P.setRequestHeader("X-PJAX", "true");
						P.setRequestHeader("X-PJAX-Container", I.selector);
						if (!K("pjax:beforeSend", [ P, O ])) {
							return false
						}
						if (O.timeout > 0) {
							J = setTimeout(function() {
								if (K("pjax:timeout", [ P, H ])) {
									P.abort("timeout")
								}
							}, O.timeout);
							O.timeout = 0
						}
						H.requestUrl = t(O.url).href
					};
					H.complete = function(O, P) {
						if (J) {
							clearTimeout(J)
						}
						K("pjax:complete", [ O, P, H ]);
						K("pjax:end", [ O, H ])
					};
					H.error = function(R, S, P) {
						var O = A("", R, H);
						var Q = K("pjax:error", [ R, S, P, H ]);
						if (H.type == "GET" && S !== "abort" && Q) {
							B(O.url)
						}
					};
					H.success = function(R, Q, W) {
						var V = (typeof k.pjax.defaults.version === "function") ? k.pjax.defaults
								.version()
								: k.pjax.defaults.version;
						var X = W.getResponseHeader("X-PJAX-Version");
						var P = A(R, W, H);
						if (V && X && V !== X) {
							B(P.url);
							return
						}
						if (!P.contents) {
							B(P.url);
							return
						}
						D.state = {
							id : H.id || q(),
							url : P.url,
							title : P.title,
							container : I.selector,
							fragment : H.fragment,
							timeout : H.timeout
						};
						if (H.push || H.replace) {
							window.history
									.replaceState(D.state, P.title, P.url)
						}
						try {
							document.activeElement.blur()
						} catch (U) {
						}
						if (P.title) {
							document.title = P.title
						}
						K("pjax:beforeReplace", [ P.contents, H ]);
						I.html(P.contents);
						var S = I.find("input[autofocus], textarea[autofocus]")
								.last()[0];
						if (S && document.activeElement !== S) {
							S.focus()
						}
						e(P.scripts);
						if (typeof H.scrollTo === "number") {
							k(window).scrollTop(H.scrollTo)
						}
						if (L !== "") {
							var O = t(P.url);
							O.hash = L;
							D.state.url = O.href;
							window.history.replaceState(D.state, P.title,
									O.href);
							var T = k(O.hash);
							if (T.length) {
								k(window).scrollTop(T.offset().top)
							}
						}
						K("pjax:success", [ R, Q, W, H ])
					};
					if (!D.state) {
						D.state = {
							id : q(),
							url : window.location.href,
							title : document.title,
							container : I.selector,
							fragment : H.fragment,
							timeout : H.timeout
						};
						window.history.replaceState(D.state, document.title)
					}
					var N = D.xhr;
					if (N && N.readyState < 4) {
						N.onreadystatechange = k.noop;
						N.abort()
					}
					D.options = H;
					var N = D.xhr = k.ajax(H);
					if (N.readyState > 0) {
						if (H.push && !H.replace) {
							n(D.state.id, I.clone().contents());
							window.history.pushState(null, "", F(H.requestUrl))
						}
						K("pjax:start", [ N, H ]);
						K("pjax:send", [ N, H ])
					}
					return D.xhr
				}
				function z(H, I) {
					var J = {
						url : window.location.href,
						push : false,
						replace : true,
						scrollTo : false
					};
					return D(k.extend(J, w(H, I)))
				}
				function B(H) {
					window.history.replaceState(null, "", "#");
					window.location.replace(H)
				}
				var m = true;
				var G = window.location.href;
				var E = window.history.state;
				if (E && E.container) {
					D.state = E
				}
				if ("state" in window.history) {
					m = false
				}
				function f(K) {
					var L = K.state;
					if (L && L.container) {
						if (m && G == L.url) {
							return
						}
						if (D.state && D.state.id === L.id) {
							return
						}
						var H = k(L.container);
						if (H.length) {
							var M, J = i[L.id];
							if (D.state) {
								M = D.state.id < L.id ? "forward" : "back";
								x(M, D.state.id, H.clone().contents())
							}
							var N = k.Event("pjax:popstate", {
								state : L,
								direction : M
							});
							H.trigger(N);
							var I = {
								id : L.id,
								url : L.url,
								container : H,
								push : false,
								fragment : L.fragment,
								timeout : L.timeout,
								scrollTo : false
							};
							if (J) {
								H.trigger("pjax:start", [ null, I ]);
								if (L.title) {
									document.title = L.title
								}
								H.trigger("pjax:beforeReplace", [ J, I ]);
								H.html(J);
								D.state = L;
								H.trigger("pjax:end", [ null, I ])
							} else {
								D(I)
							}
							H[0].offsetHeight
						} else {
							B(location.href)
						}
					}
					m = false
				}
				function h(I) {
					var H = k.isFunction(I.url) ? I.url() : I.url, L = I.type ? I.type
							.toUpperCase()
							: "GET";
					var J = k("<form>", {
						method : L === "GET" ? "GET" : "POST",
						action : H,
						style : "display:none"
					});
					if (L !== "GET" && L !== "POST") {
						J.append(k("<input>", {
							type : "hidden",
							name : "_method",
							value : L.toLowerCase()
						}))
					}
					var K = I.data;
					if (typeof K === "string") {
						k.each(K.split("&"), function(M, N) {
							var O = N.split("=");
							J.append(k("<input>", {
								type : "hidden",
								name : O[0],
								value : O[1]
							}))
						})
					} else {
						if (typeof K === "object") {
							for (key in K) {
								J.append(k("<input>", {
									type : "hidden",
									name : key,
									value : K[key]
								}))
							}
						}
					}
					k(document.body).append(J);
					J.submit()
				}
				function q() {
					return (new Date).getTime()
				}
				function F(H) {
					return H.replace(/\?_pjax=[^&]+&?/, "?").replace(
							/_pjax=[^&]+&?/, "").replace(/[\?&]$/, "")
				}
				function t(I) {
					var H = document.createElement("a");
					H.href = I;
					return H
				}
				function w(H, I) {
					if (H && I) {
						I.container = H
					} else {
						if (k.isPlainObject(H)) {
							I = H
						} else {
							I = {
								container : H
							}
						}
					}
					if (I.container) {
						I.container = v(I.container)
					}
					return I
				}
				function v(H) {
					H = k(H);
					if (!H.length) {
						throw "no pjax container for " + H.selector
					} else {
						if (H.selector !== "" && H.context === document) {
							return H
						} else {
							if (H.attr("id")) {
								return k("#" + H.attr("id"))
							} else {
								throw "cant get selector for pjax container!"
							}
						}
					}
				}
				function r(I, H) {
					return I.filter(H).add(I.find(H))
				}
				function y(H) {
					return k.parseHTML(H, document, true)
				}
				function A(K, M, I) {
					var L = {};
					L.url = F(M.getResponseHeader("X-PJAX-URL") || I.requestUrl);
					if (/<html/i.test(K)) {
						var H = k(y(K.match(/<head[^>]*>([\s\S.]*)<\/head>/i)[0]));
						var J = k(y(K.match(/<body[^>]*>([\s\S.]*)<\/body>/i)[0]))
					} else {
						var H = J = k(y(K))
					}
					if (J.length === 0) {
						return L
					}
					L.title = r(H, "title").last().text();
					if (I.fragment) {
						if (I.fragment === "body") {
							var N = J
						} else {
							var N = r(J, I.fragment).first()
						}
						if (N.length) {
							L.contents = N.contents();
							if (!L.title) {
								L.title = N.attr("title") || N.data("title")
							}
						}
					} else {
						if (!/<html/i.test(K)) {
							L.contents = J
						}
					}
					if (L.contents) {
						L.contents = L.contents.not(function() {
							return k(this).is("title")
						});
						L.contents.find("title").remove();
						L.scripts = r(L.contents, "script[src]").remove();
						L.contents = L.contents.not(L.scripts)
					}
					if (L.title) {
						L.title = k.trim(L.title)
					}
					return L
				}
				function e(H) {
					if (!H) {
						return
					}
					var I = k("script[src]");
					H.each(function() {
						var K = this.src;
						var L = I.filter(function() {
							return this.src === K
						});
						if (L.length) {
							return
						}
						var J = document.createElement("script");
						J.type = k(this).attr("type");
						J.src = k(this).attr("src");
						document.head.appendChild(J)
					})
				}
				var i = {};
				var j = [];
				var l = [];
				function n(I, H) {
					i[I] = H;
					l.push(I);
					while (j.length) {
						delete i[j.shift()]
					}
					while (l.length > D.defaults.maxCacheLength) {
						delete i[l.shift()]
					}
				}
				function x(J, L, I) {
					var K, H;
					i[L] = I;
					if (J === "forward") {
						K = l;
						H = j
					} else {
						K = j;
						H = l
					}
					K.push(L);
					if (L = H.pop()) {
						delete i[L]
					}
				}
				function C() {
					return k("meta").filter(function() {
						var H = k(this).attr("http-equiv");
						return H && H.toUpperCase() === "X-PJAX-VERSION"
					}).attr("content")
				}
				function s() {
					k.fn.pjax = o;
					k.pjax = D;
					k.pjax.enable = k.noop;
					k.pjax.disable = g;
					k.pjax.click = p;
					k.pjax.submit = u;
					k.pjax.reload = z;
					k.pjax.defaults = {
						timeout : 650,
						push : true,
						replace : false,
						type : "GET",
						dataType : "html",
						scrollTo : 0,
						maxCacheLength : 20,
						version : C
					};
					k(window).on("popstate.pjax", f)
				}
				function g() {
					k.fn.pjax = function() {
						return this
					};
					k.pjax = h;
					k.pjax.enable = s;
					k.pjax.disable = k.noop;
					k.pjax.click = k.noop;
					k.pjax.submit = k.noop;
					k.pjax.reload = function() {
						window.location.reload()
					};
					k(window).off("popstate.pjax", f)
				}
				if (k.inArray("state", k.event.props) < 0) {
					k.event.props.push("state")
				}
				k.support.pjax = window.history
						&& window.history.pushState
						&& window.history.replaceState
						&& !navigator.userAgent
								.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
				k.support.pjax ? s() : g()
			})(jQuery)
		});